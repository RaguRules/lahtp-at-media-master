<?php

/**
 * Session class is a bunch of static methods helpful for easy handling of the session.
 */
class Session {

	/**
	 * Version information generated by the QuickGit class. Initialized at WebAPI.
	 * @var string
	 */
	public static $version = '';
	public static $fullVersion = '';
	public static $versionDescription = '';

	/**
	 * Environment decided by the WebAPI. It can be  local, beta or prod. Used for several features inside the webapp.
	 * @var string
	 */
	public static $environment = '';

	/**
	 * LocalPack is an array, which can have array("title"=>"", "message"=>"") as it's resource. It get's popped up if set during the session at the client side only on an API request limited only to the local $environment.
	 * @var null
	 */
	public static $localPack = null;

	/**
	 * CacheCDN domain, decided by the WebAPI for the current environment. Utilized by the Session::cacheCDN/cdn method.
	 * @var String
	 */
	public static $cacheCDN = null;

	/**
	 * Any key/value pair needs to be shared accross the session can be stored here. Used by the Session::get()/Session::set() methods.
	 * @var array
	 */
	public static $property = array();

	public static function cacheCDN($url) {
		$result = new Url($url);
		$result->append('_', Session::$version);
		$result = $result->getAbsoluteUrl(Session::$cacheCDN);
		return $result;
	}
	
	public static function getUserSession() {
		return Session::$userSession;
	}

	/**
	 * Session wide property sharing method, which sets a value against a key.
	 * @param String $key   Key for the value
	 * @param Any $value Value can be of any type.
	 */
	public static function set($key, $value) {
		Session::$property[$key] = $value;
	}

	/**
	 * Session wide property sharing method, which gets the value against a key.
	 * @param  String $key
	 * @return Any
	 */
	public static function get($key) {
		if (isset(Session::$property[$key])) {
			return Session::$property[$key];
		} else {
			return false;
		}
	}

	/**
	 * Generate pesudo random hash encoded with Base64
	 * @param  integer $int length in bytes
	 * @return String       Base64 representation of the pseudorandom bytes.
	 */
	public static function generatePesudoRandomHash($int = 10) {
		return base64_encode(openssl_random_pseudo_bytes($int));
	}

	/**
	 * Returns the current executing script name without extenstion
	 * @return String
	 */
	public static function getCurrentFile() {
		$tokens = explode('/', $_SERVER['PHP_SELF']);
		$currentFile = array_pop($tokens);
		$currentFile = explode('.', $currentFile);
		array_pop($currentFile);
		$currentFile = implode('.', $currentFile);
		return $currentFile;
	}

	public static function checkIP($ip){
		$wlist = file_get_contents(__DIR__.'/../ip.txt');
		$wlist = explode("\n", $wlist);
		foreach ($wlist as $cidr) {
			if(Session::ipCIDRCheck($ip, $cidr)){
				return true;
			}
		}
	}

	public static function ipCIDRCheck ($IP, $CIDR) {
		list ($net, $mask) = explode("/", $CIDR);
		$ip_net = ip2long ($net);
		$ip_mask = ~((1 << (32 - $mask)) - 1);
		$ip_ip = ip2long ($IP);
		$ip_ip_net = $ip_ip & $ip_mask;
		return ($ip_ip_net == $ip_net);
	}
}

class System {

	const OS_UNKNOWN = 1;
	const OS_WIN = 2;
	const OS_LINUX = 3;
	const OS_OSX = 4;

	/**
	 * @return int
	 */
	static public function getOS() {
		switch (true) {
			case stristr(PHP_OS, 'DAR'): return self::OS_OSX;
			case stristr(PHP_OS, 'WIN'): return self::OS_WIN;
			case stristr(PHP_OS, 'LINUX'): return self::OS_LINUX;
			default:return self::OS_UNKNOWN;
		}
	}

}